== IOP16 - I/O Processor with minimal instruction set ==

* 16-bit instruction code
* 12-bits address (up to 4096 instructions stored in FPGA ROM)
* Useful for for polled I/O
** 8 registers (8-bits) (read/write) for parameters/data
** Reserved space in instruction for 16 of 8-bit registers
* 8-bit data and address peripheral interface
** Controls up to 256 peripherals

=== Block Diagram ===

<img src="https://raw.githubusercontent.com/douggilliland/MultiComp/master/MultiComp%20(VHDL%20Template)/Components/CPU/IOP16/IOP16_Block_Diagram.PNG"></img>

=== Op Codes ===

* NOP - x0 - No Operation - Increments PC
* LRI - x2 - Load register with immediate value
* IOR - x6 - I/O Read into register
* IOW - x7 - I/O Write from register
* ARI - x8 - AND register with Immediate value and store back into register (sets zero flag is result is zero)
* ORI - x9 - OR register with Immediate value and store back into register (sets zero flag if result is zero)
* JSR - xa - Jump to subroutine (Added in IOP16B)
* RTS - xb - Return from subroutine (Added in IOP16B)
* BEZ - xc - Branch by offset if equal to zero
* BNZ - xd - Branch by offset if not equal to zero
* JMP - xe - Jump to address (12-bits)

<img src="https://raw.githubusercontent.com/douggilliland/MultiComp/master/MultiComp%20(VHDL%20Template)/Components/CPU/IOP16/IOP16_OpCodes.PNG"></img>

=== Fields ===

* d15..d12 = opcode
* d11..d0  = 12-bit offset (BEZ, BNZ)
* d11..d0  = 12-bit address (JMP)
* d7..d0   = 8-bit address (IOR, IOW)
* d11..d8  = register number (LRI, IOR, IOW, ARI, ORI)
* d7..d0   = Immediate value (LRI, ARI, ORI)

== Programming Tools ==

* [https://github.com/douggilliland/MultiComp/blob/master/MultiComp%20(VHDL%20Template)/Components/CPU/IOP16/IOP16_ASSEMBLER/pyAssemble_IOP16.py Assembler]
* [https://github.com/douggilliland/MultiComp/blob/master/MultiComp%20(VHDL%20Template)/Components/CPU/IOP16/IOP16_ASSEMBLER/pyCompile_IOP16.py Compiler] (Macro Assembler)
* Tools are written in Python 3
* Input files are .csv files

=== Assembler ===

* Input File Header

<pre>['LABEL', 'OPCODE', 'REG_LABEL', 'OFFSET_ADDR', 'COMMENT']</pre>

=== Compiler ===

* Input File Header

<pre>['LABEL', 'COMMAND', 'I2C_ADDR', '23017_REG', 'VALUE', 'COMMENT']</pre>

* Macros (in addition to direcly supporting assembler instructions)
** WI2C3_CONST	- Write a constant value to an MCP23017
** RI2C3_REG	- Read a byte from an MCP23017 to a register
** WI2C3_REG	- Wrie a register value to an MCP23017
* HALT		- Jump to self
* Fairly easy to add new macros
